#!/usr/bin/env python 

import socket
import threading
import logging
import json
import os

from mako.template import Template
from pyramid.response import Response
from paste.httpserver import serve

from gridcentric.pancake.service import Service

from gridcentric.pancake.manager import ScaleManager
from gridcentric.pancake.manager import locked

from gridcentric.pancake.config import ServiceConfig
from gridcentric.pancake.api import get_auth_key
from gridcentric.pancake.api import PancakeApi
from gridcentric.pancake.api import connected
from gridcentric.pancake.api import authorized
from gridcentric.pancake.api import authorized_admin_only

import gridcentric.pancake.ips as ips
import gridcentric.pancake.zookeeper.config as zk_config
import gridcentric.pancake.zookeeper.paths as paths
import gridcentric.pancake.zooclient as zooclient

class APIService(Service):
    def __init__(self, scale_manager):

        class APIServiceConfig(ServiceConfig):
            def __init__(self, scale_manager):
                self.scale_manager = scale_manager
            def _load(self, config_str):
                pass
            def reload(self, config_str):
                pass
            def url(self):
                return "http://api.%s/" % self.scale_manager.domain
            def port(self):
                return 8080
            def public(self):
                return False
            def instance_id(self):
                return "0"
            def min_instances(self):
                return 0
            def max_instances(self):
                return 0
            def metrics(self):
                return ""
            def source(self):
                return None
            def get_service_auth(self):
                return (None, None, None)
            def auth_info(self):
                return None
            def static_ips(self):
                return self.scale_manager.zk_conn.list_children(paths.manager_ips())
            def cloud_type(self):
                return "none"
            def cloud_config(self):
                return {}
            def __str__(self):
                return ""

        # Create an API service that will automatically reload.
        super(APIService, self).__init__("api",
                                         APIServiceConfig(scale_manager),
                                         scale_manager)

class AutoScaleManager(ScaleManager):
    def __init__(self, zk_servers):
        ScaleManager.__init__(self, zk_servers)
        self.api_service = None # The implicit API service.

    def start_params(self):
        return {"reactor" : "api.%s" % self.domain}

    def default_config(self):
        return """
[manager]
keys=64
loadbalancer=dnsmasq,nginx

[loadbalancer:nginx]
sticky_sessions=true
keepalive=0
"""

    @locked
    def serve(self):
        ScaleManager.serve(self)

        # Create the API service.
        if not(self.api_service):
            self.api_service = APIService(self)

        # Ensure it is being served.
        if not(self.api_service.name in self.services):
            self.create_service(self.api_service.name)

    @locked
    def create_service(self, service_name):
        if service_name == "api":
            logging.info("API service found.")

            # Create the API service object.
            service = APIService(self)
            self.add_service(service, service_path=paths.service(service.name))
        else:
            # Create the standard service.
            super(AutoScaleManager, self).create_service(service_name)

    @locked
    def reload_domain(self, domain):
        if self.api_service:
            # Teardown (based on the old domain).
            self.remove_service(self.api_service.name)

        super(AutoScaleManager, self).reload_domain(domain)

        if self.api_service:
            # Reload the implicit service.
            self.add_service(self.api_service)

class PancakeAutoApi(PancakeApi):
    def __init__(self, zk_servers):
        self.manager_running = False
        PancakeApi.__init__(self, zk_servers)

        self.config.add_route('api-servers', '/reactor/api_servers')
        self.config.add_view(self.set_api_servers, route_name='api-servers')

        self.config.add_route('admin-b1', '/reactor/admin')
        self.config.add_route('admin-b2', '/reactor/admin/')
        self.config.add_route('admin', '/reactor/admin/{page_name}')
        self.config.add_view(self.admin, route_name='admin-b1')
        self.config.add_view(self.admin, route_name='admin-b2')
        self.config.add_view(self.admin, route_name='admin')

        # Check the service.
        self.check_service(zk_servers)

    @connected
    def admin(self, context, request):
        """
        Render a page from the admin directory and write it back.
        """
        if request.method == 'GET':
            # Read the page_name from the request.
            page_name = request.matchdict.get('page_name', 'index.html')
            filename = os.path.join(os.path.dirname(__file__), \
                                    "../share/reactor/admin/", page_name)
            template = Template(filename=filename)

            # Process the request with all params.
            auth_key = get_auth_key(request)
            kwargs = {}
            kwargs.update(request.params.items())
            kwargs["auth_key"] = auth_key
            page_data = template.render(**kwargs)

            # Check for special types.
            ext = page_name.split('.')[-1]
            mimemap = { "js" : "application/json",
                        "html" : "text/html",
                        "css" : "text/css" }
            return Response(body=page_data,
                            headers={"Content-type" : mimemap[ext]})
        else:
            return Response(status=403)

    @connected
    @authorized_admin_only
    def set_api_servers(self, context, request):
        """
        Updates the list of API servers in the system.
        """
        if request.method == 'POST':
            api_servers = json.loads(request.body)['api_servers']
            logging.info("Updating API Servers.")
            self.reconnect(api_servers)
            return Response()
        elif request.method == 'GET':
            return Response(body=json.dumps({ "api_servers" : self.zk_servers }))
        else:
            return Response(status=403)

    def start_manager(self, zk_servers):
        zk_servers.sort()
        self.zk_servers.sort()
        if self.zk_servers != zk_servers:
            self.stop_manager()

        if not(self.manager_running):
            self.manager = AutoScaleManager(zk_servers)
            self.manager_thread = threading.Thread(target=self.manager.run)
            self.manager_thread.daemon = True
            self.manager_thread.start()
            self.manager_running = True

    def stop_manager(self):
        if self.manager_running:
            self.manager.clean_stop()
            self.manager_thread.join()
            self.manager_running = False

    def check_service(self, zk_servers):
        is_local = ips.any_local(zk_servers)

        if not(is_local):
            # Ensure that Zookeeper is stopped.
            zk_config.ensure_stopped()
            zk_config.check_config(zk_servers)

        else:
            # Ensure that Zookeeper is started.
            logging.info("Starting Zookeeper; stopping manager.")
            self.stop_manager()
            zk_config.check_config(zk_servers)
            zk_config.ensure_started()

        # NOTE: We now *always* start the manager. We rely on the user to
        # actually deactivate it or set the number of keys appropriately when
        # they do not want it to be used to power services.
        self.start_manager(zk_servers)

    def reconnect(self, zk_servers):
        # Check that we are running correctly.
        self.check_service(zk_servers)

        # Call the base API to reconnect.
        PancakeApi.reconnect(self, zk_servers)

def main():
    try:
        zk_servers = zk_config.read_config()
    except:
        zk_servers = []
    if len(zk_servers) == 0:
        zk_servers = ["localhost"]
    app = PancakeAutoApi(zk_servers)
    serve(app.get_wsgi_app(), host='0.0.0.0')

if __name__ == "__main__":
    main()
