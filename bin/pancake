#!/usr/bin/env python

import getopt
import logging
import signal
import sys
import traceback
import threading

from StringIO import StringIO
from ConfigParser import SafeConfigParser

from gridcentric.pancake.api import PancakeApiClient
from gridcentric.pancake import log
import gridcentric.pancake.zookeeper.config as config

api_server = "http://localhost:8080"
zk_servers = []
password = None
debug = False
logfile = None

def usage():
    print "usage: pancake [-h] [--help] [-z |--zookeeper=<zookeeper instance>] command"
    print ""
    print "Optional arguments:"
    print "   -h, --help             Display this help message"
    print ""
    print "   -a, --api=            The API url to connect to (default is http://localhost:8080)."
    print ""
    print "   -p, --password=        The password used to connect to the API."
    print ""
    print "   -z, --zookeeper=       The host:port of a zookeeper instance. Use this option multiple"
    print "                          times to specific multiple instances. Only necessary for 'run*'."
    print "                          The default is the last configuration, or localhost."
    print ""
    print "   -d, --debug            Enables debugging log and full stack trace errors."
    print ""
    print "   -l, --log=             Log to a file instead of stdout."
    print ""
    print "Commands:"
    print "    list-services            List all the services currently being managed."
    print ""
    print "    manage <service_name>    Manage a new serivce with the given name. The service's"
    print "                             configuration is read from stdin."
    print ""
    print "    unmanage <service_name>  Unmanged the service with the given name."
    print ""
    print "    update <service_name>    Update the managed service's configuration by reading the"
    print "                             values from stdin."
    print ""
    print "    show <service_name>      Show the current configuration for the service."
    print ""
    print "    list-ips <service_name>  Displays all of the IP addresses associated with the service."
    print ""
    print "    passwd <password>        Updates the API's password."
    print ""
    print "    runserver                Run the scale manager server."
    print ""
    print "    runapi                   Runs the API server."
    print ""
    print "    run                      Runs the API server, and either Zookeeper or the scale"
    print "                             manager, depending on configured Zookeeper servers."

opts, args = getopt.getopt(sys.argv[1:], 
                            "ha:p:z:dl:", 
                           ["help","api_server=","password=","zookeeper=","debug","log="])

for o, a in opts:
    if o in ('-h', '--help'):
        usage()
        sys.exit(0)
    elif o in ('-a', '--api'):
        api_server = a
    elif o in ('-p', '--password'):
        password = a
    elif o in ('-z', '--zookeeper'):
        zk_servers.append(a)
    elif o in ('-d', '--debug'):
        debug=True
    elif o in ('-l','--log'):
        logfile = a

if len(zk_servers) == 0:
    try:
        zk_servers = config.read_config()
    except:
        pass
    if len(zk_servers) == 0:
        zk_servers = ["localhost"]

loglevel = logging.INFO
if debug:
    loglevel = logging.DEBUG

if len(args) < 1:
    usage()
    sys.exit(1)

command = args[0]

def get_api_client():
    return PancakeApiClient(api_server, password)

try:
    if command == "list-services":
        api_client = get_api_client()
        services = api_client.list_managed_services()
        if services:
            for service in services: 
                print service

    elif command == "manage":
        service_name = args[1]
        service_conf = ""
        for line in sys.stdin.readlines():
            service_conf += line

        api_client = get_api_client()
        api_client.manage_service(service_name, service_conf)

    elif command == "unmanage":
        service_name = args[1]
        api_client = get_api_client()
        api_client.unmanage_service(service_name)

    elif command == "update":
        service_name = args[1]
        new_conf = ""
        for line in sys.stdin.readlines():
            new_conf += line

        # Read in the existing configuration and update it with
        # with the new configuration. This allows people to do a
        # partial update.
        api_client = get_api_client()
        service_conf = api_client.get_service_config(service_name)
        config = SafeConfigParser()
        config.readfp(StringIO(service_conf))
        config.readfp(StringIO(new_conf))

        # Write out the full contents of the updated configuration.
        config_value = StringIO()
        config.write(config_value)
        api_client.update_service(service_name, config_value.getvalue())

    elif command == "show":
        service_name = args[1]
        api_client = get_api_client()
        config = api_client.get_service_config(service_name)
        print config.strip()

    elif command == "list-ips":
        service_name = args[1]
        api_client = get_api_client()
        ip_addresses = api_client.list_service_ips(service_name)
        for ip in ip_addresses:
            print ip

    elif command == "passwd":
        new_password = args[1]
        api_client = get_api_client()
        api_client.update_api_key(new_password)

    elif command == "runserver":

        from gridcentric.pancake.manager import ScaleManager

        log.configure(loglevel, logfile)
        manager = ScaleManager(zk_servers)
        manager.run()

    elif command == "runapi":

        from paste.httpserver import serve
        from gridcentric.pancake.api import PancakeApi

        log.configure(loglevel, logfile)
        api = PancakeApi(zk_servers)
        serve(api.get_wsgi_app(), host='0.0.0.0')

    elif command == "run":

        from paste.httpserver import serve
        from gridcentric.pancake.auto import PancakeAutoApi

        log.configure(loglevel, logfile)
        api = PancakeAutoApi(zk_servers)
        serve(api.get_wsgi_app(), host='0.0.0.0')

    else:
        usage()
        sys.exit(1)

except Exception, e:
    if debug:
        traceback.print_exc()
    else:
        sys.stderr.write("%s\n" %(e))
        sys.exit(1)
