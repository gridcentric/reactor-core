#!/usr/bin/env python

import getopt
import logging
import signal
import sys
import traceback
import threading

from StringIO import StringIO
from ConfigParser import SafeConfigParser

from gridcentric.pancake.api import PancakeApiClient
from gridcentric.pancake import log
import gridcentric.pancake.zookeeper.config as config

api_server = "http://localhost:8080"
zk_servers = []
password = None
debug = False
logfile = None
update = False

def default_zk_servers():
    try:
        servers = config.read_config()
    except:
        servers = []
    if len(servers) > 0:
        return servers
    else:
        return ["localhost"]

def usage():
    print "usage: pancake < -h|--help | [options] command >"
    print ""
    print "Optional arguments:"
    print "   -h, --help             Display this help message"
    print ""
    print "   -a, --api=             The API url (default is %s)." % api_server
    print ""
    print "   -p, --password=        The password used to connect to the API."
    print ""
    print "   -z, --zookeeper=       The host:port of a zookeeper instance. Use this option"
    print "                          multiple times to specific multiple instances. Only"
    print "                          necessary for run commands."
    print "                          The default set is: %s" % ",".join(default_zk_servers())
    print ""
    print "   -d, --debug            Enables debugging log and full stack trace errors."
    print ""
    print "   -l, --log=             Log to a file instead of stdout."
    print ""
    print "   -u, --update           Perform an incremental configuration update."
    print ""
    print "Commands:"
    print "    list                  List all the services currently being managed."
    print ""
    print "    manage <service>      Manage a new serivce with the given name. The"
    print "                          service configuration is read from stdin."
    print ""
    print "    unmanage <service>    Unmanged the service with the given name."
    print ""
    print "    update <service>      Update the managed service's configuration by"
    print "                          reading the values from stdin."
    print ""
    print "    show <service>        Show the current configuration for the service."
    print ""
    print "    ips <service>         Displays all of the IP addresses associated with"
    print "                          the service."
    print ""
    print "    managers-configured   List all the configured managers."
    print ""
    print "    managers-active       List all the active managers."
    print ""
    print "    update-manager [ip]   Update the current configuration for the manager."
    print ""
    print "    show-manager [ip]     Show the current configuration for the manager."
    print ""
    print "    passwd <password>     Updates the API's password."
    print ""
    print "    runserver             Run the scale manager server."
    print ""
    print "    runapi                Runs the API server."
    print ""
    print "    run                   Runs the API server, and either Zookeeper or the"
    print "                          scale manager, depending on configured Zookeeper"
    print "                          servers."

opts, args = getopt.getopt(sys.argv[1:], 
                            "ha:p:z:dl:u", 
                           ["help","api_server=","password=","zookeeper=","debug","log=","update"])

for o, a in opts:
    if o in ('-h', '--help'):
        usage()
        sys.exit(0)
    elif o in ('-a', '--api'):
        api_server = a
    elif o in ('-p', '--password'):
        password = a
    elif o in ('-z', '--zookeeper'):
        zk_servers.append(a)
    elif o in ('-d', '--debug'):
        debug=True
    elif o in ('-l','--log'):
        logfile = a
    elif o in ('-u','--update'):
        update = True

if len(zk_servers) == 0:
    zk_servers = default_zk_servers()

loglevel = logging.INFO
if debug:
    loglevel = logging.DEBUG

def get_arg(n):
    if len(args) < n+1:
        usage()
        sys.exit(1)
    return args[n]

command = get_arg(0)

def get_api_client():
    return PancakeApiClient(api_server, password)

try:
    if command == "list":
        api_client = get_api_client()
        services = api_client.list_managed_services()
        if services:
            for service in services: 
                print service

    elif command == "manage":
        service_name = get_arg(1)
        service_conf = ""
        for line in sys.stdin.readlines():
            service_conf += line

        api_client = get_api_client()
        api_client.manage_service(service_name, service_conf)

    elif command == "unmanage":
        service_name = get_arg(1)
        api_client = get_api_client()
        api_client.unmanage_service(service_name)

    elif command == "update":
        service_name = get_arg(1)
        new_conf = ""
        for line in sys.stdin.readlines():
            new_conf += line

        config = SafeConfigParser()
        if update:
            # Read in the existing configuration and update it with
            # with the new configuration. This allows people to do a
            # partial update.
            api_client = get_api_client()
            service_conf = api_client.get_service_config(service_name)
            config.readfp(StringIO(service_conf))
        config.readfp(StringIO(new_conf))

        # Write out the full contents of the updated configuration.
        config_value = StringIO()
        config.write(config_value)
        api_client.update_service(service_name, config_value.getvalue())

    elif command == "show":
        service_name = get_arg(1)
        api_client = get_api_client()
        config = api_client.get_service_config(service_name)
        print config.strip()

    elif command == "managers-configured":
        api_client = get_api_client()
        managers = api_client.list_managers_configured()
        if managers:
            for manager in managers:
                print manager

    elif command == "managers-active":
        api_client = get_api_client()
        managers = api_client.list_managers_active()
        if managers:
            for manager in managers:
                print manager

    elif command == "update-manager":
        if len(args) > 1:
            manager = args[1]
        else:
            manager = None
        new_conf = ""
        for line in sys.stdin.readlines():
            new_conf += line

        config = SafeConfigParser()
        if update:
            # As per above, allow for incremental updates.
            api_client = get_api_client()
            manager_conf = api_client.get_manager_config(manager)
            config.readfp(StringIO(manager_conf))
        config.readfp(StringIO(new_conf))

        # Write out the full contents of the updated configuration.
        config_value = StringIO()
        config.write(config_value)
        api_client.update_manager(manager, config_value.getvalue())

    elif command == "show-manager":
        if len(args) > 1:
            manager = args[1]
        else:
            manager = None
        api_client = get_api_client()
        config = api_client.get_manager_config(manager)
        print config.strip()

    elif command == "ips":
        service_name = get_arg(1)
        api_client = get_api_client()
        ip_addresses = api_client.list_service_ips(service_name)
        for ip in ip_addresses:
            print ip

    elif command == "passwd":
        new_password = get_arg(1)
        api_client = get_api_client()
        api_client.update_api_key(new_password)

    elif command == "runserver":

        from gridcentric.pancake.manager import ScaleManager

        log.configure(loglevel, logfile)
        manager = ScaleManager(zk_servers)
        manager.run()

    elif command == "runapi":

        from paste.httpserver import serve
        from gridcentric.pancake.api import PancakeApi

        log.configure(loglevel, logfile)
        api = PancakeApi(zk_servers)
        serve(api.get_wsgi_app(), host='0.0.0.0')

    elif command == "run":

        from paste.httpserver import serve
        from gridcentric.pancake.auto import PancakeAutoApi

        log.configure(loglevel, logfile)
        api = PancakeAutoApi(zk_servers)
        serve(api.get_wsgi_app(), host='0.0.0.0')

    else:
        usage()
        sys.exit(1)

except Exception, e:
    if debug:
        traceback.print_exc()
    else:
        sys.stderr.write("%s\n" %(e))
        sys.exit(1)
