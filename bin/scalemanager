#!/usr/bin/env python



from ConfigParser import SafeConfigParser
import getopt
import logging
import signal
from StringIO import StringIO
import sys


from gridcentric.scalemanager.client import ScaleManagerClient

def usage():
    print "usage: scalemanager [-h] [--help] -z |--zookeeper=<zookeeper instance> command"
    print ""
    print "Optional arguments:"
    print "   -h,--help              Display this help message"
    print ""
    print "Required arguments:"
    print "   -z, --zookeeper=       The host:port of a zookeeper instance. Use this option multiple"
    print "                          times to specific a pool of zookeeper instances."
    print ""
    print "Commands:"
    print "    list-services            List all the services currently being managed."
    print ""
    print "    manage <service_name>    Manage a new serivce with the given name. The service's"
    print "                             configuration is read from stdin."
    print ""
    print "    unmange <service_name>   Unmanged the service with the given name."
    print ""
    print "    update <service_name>    Update the managed service's configuration by reading the"
    print "                             values from stdin."
    print ""
    print "    show <service_name>      Show the current configuration for the service."
    print ""
    print "    runserver                Run the scale manager server."
    print ""
    print"     runapi                   Runs the API server."
    
    
opts, args = getopt.getopt(sys.argv[1:], "hz:", ["help","zookeeper="])

zk_servers = ""
for o, a in opts:
    if o in ('-h', '--help'):
        usage()
        sys.exit(0)
    elif o in ('-z', '--zookeeper'):
        zk_servers += "," + a

if len(args) < 1 or zk_servers == "":
    usage()
    sys.exit(1)

command = args[0]
client = ScaleManagerClient(zk_servers[1:])
if command == "list-services":
    services = client.list_managed_services()
    if services:
        for service in services: 
            print service

elif command == "manage":
    service_name = args[1]
    service_conf = ""
    for line in sys.stdin.readlines():
        service_conf += line
    
    client.manage_service(service_name, service_conf)

elif command == "unmanage":
    service_name = args[1]
    client.unmanage_service(service_name)

elif command == "update":
    service_name = args[1]
    new_conf = ""
    for line in sys.stdin.readlines():
        new_conf += line
    
    # Read in the existing configuration and update it with
    # with the new configuration. This allows people to do a
    # partial update.
    service_conf = client.get_service_config(service_name)
    print service_conf
    config = SafeConfigParser()
    config.readfp(StringIO(service_conf))
    config.readfp(StringIO(new_conf))
    
    # Write out the full contents of the updated configuration.
    config_value = StringIO()
    config.write(config_value)
    client.update_service(service_name, config_value.getvalue())
    

elif command == "show":
    service_name = args[1]
    config = client.get_service_config(service_name)
    
    print config
    
elif command == "runserver":
    
    from gridcentric.scalemanager.manager import ScaleManager
    logging.basicConfig(level=logging.INFO)
    manager = ScaleManager()
    manager.serve(zk_servers)
    manager.run()

elif command == 'runapi':
    from paste.httpserver import serve
    from gridcentric.scalemanager.api import ScaleManagerApi
    
    api = ScaleManagerApi(zk_servers)
    serve(api.get_wsgi_app(), host='0.0.0.0')

else:
    usage()
    sys.exit(1)

